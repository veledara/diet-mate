import logging
from aiogram import Router, types
from aiogram.filters import CommandStart

from src.services.logic.user_service import (
    get_user_by_telegram_id,
    register_new_user,
    accept_user_agreement,
)
from src.bot.keyboards.inline import get_user_agreement_keyboard


logger = logging.getLogger(__name__)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username

    user = await get_user_by_telegram_id(telegram_id)
    if not user:
        user = await register_new_user(telegram_id, username)

    if not user.agreement_accepted:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.",
            reply_markup=get_user_agreement_keyboard(),
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")


@router.callback_query(lambda call: call.data == "accept_agreement")
async def accept_agreement(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id

    user = await get_user_by_telegram_id(telegram_id)
    if not user:
        await callback_query.message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
        )
        await callback_query.answer()
        return

    if not user.agreement_accepted:
        result = await accept_user_agreement(telegram_id)
        if result:
            await callback_query.message.answer(
                "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å—ä–µ–ª–∏, –∞ —è —Ä–∞—Å—á–∏—Ç–∞—é –ö–ë–ñ–£!\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<blockquote>–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –∫–æ—Ñ–µ</blockquote>\n"
                "–ï—Å–ª–∏ –≤–∞–º –Ω–µ—É–¥–æ–±–Ω–æ —Ç–µ–∫—Å—Ç–æ–º, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                "–∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–π –µ–¥—ã.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /profile\n"
                "–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π!\n\n"
                "<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
                parse_mode="HTML",
            )
        else:
            await callback_query.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /start."
            )
    else:
        await callback_query.message.answer("–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ!")

    await callback_query.answer()
