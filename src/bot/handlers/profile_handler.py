import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from src.services.logic.nutrition_service import (
    create_or_update_profile_and_nutrition_by_telegram_id,
    get_user_profile_by_telegram_id,
    get_user_nutrition_by_telegram_id,
)
from src.services.logic.nutrition_calculation_service import calculate_nutrition
from src.bot.states.user_profile import UserProfileStates
from src.bot.keyboards.inline import (
    gender_keyboard,
    activity_level_keyboard,
    get_profile_edit_keyboard,
    goal_keyboard,
)
from src.bot.keyboards.reply import cancel_keyboard
from src.models.user_profile import Gender, ActivityLevel, Goal
from src.services.logic.user_weight_history_service import (
    create_weight_record_by_telegram_id,
)


logger = logging.getLogger(__name__)

router = Router()


async def apply_profile_update(user_id: int, user_profile, field_name: str, new_value):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è, –≤–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–æ—Ä–º—É,
    """
    profile_data = {
        "gender": user_profile.gender,
        "height": user_profile.height,
        "weight": user_profile.weight,
        "target_weight": user_profile.target_weight,
        "age": user_profile.age,
        "activity_level": user_profile.activity_level,
        "goal": user_profile.goal,
    }
    profile_data[field_name] = new_value

    daily_calories, proteins, fats, carbs = calculate_nutrition(
        gender=profile_data["gender"],
        weight=profile_data["weight"],
        height=profile_data["height"],
        age=profile_data["age"],
        activity_level=profile_data["activity_level"],
        goal=profile_data["goal"],
    )
    nutrition_data = {
        "daily_calories": daily_calories,
        "proteins": proteins,
        "fats": fats,
        "carbohydrates": carbs,
    }

    await create_or_update_profile_and_nutrition_by_telegram_id(
        telegram_id=user_id,
        profile_data=profile_data,
        nutrition_data=nutrition_data,
    )

    updated_profile = await get_user_profile_by_telegram_id(user_id)
    updated_nutrition = await get_user_nutrition_by_telegram_id(user_id)
    return updated_profile, updated_nutrition


def format_profile_text(user_profile, user_nutrition) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏.
    """
    return (
        "üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üë§ <b>–ü–æ–ª:</b> {user_profile.gender.display_name}\n"
        f"üìè <b>–†–æ—Å—Ç:</b> {user_profile.height} —Å–º\n"
        f"‚öñÔ∏è <b>–í–µ—Å:</b> {user_profile.weight} –∫–≥\n"
        f"üéØ <b>–¶–µ–ª–µ–≤–æ–π –≤–µ—Å:</b> {user_profile.target_weight} –∫–≥\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_profile.age} –ª–µ—Ç\n"
        f"üèÉ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user_profile.activity_level.display_name}\n"
        f"‚ú® <b>–¶–µ–ª—å:</b> {user_profile.goal.display_name}\n\n"
        "üçΩ <b>–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {user_nutrition.calories:.0f} –∫–∫–∞–ª\n"
        f"ü•© <b>–ë–µ–ª–∫–∏:</b> {user_nutrition.proteins:.1f} –≥\n"
        f"ü•ë <b>–ñ–∏—Ä—ã:</b> {user_nutrition.fats:.1f} –≥\n"
        f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {user_nutrition.carbohydrates:.1f} –≥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ó–∞–∫—Ä—ã—Ç—å</b>."
    )


@router.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /profile, –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ä–∞—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –ö–ë–ñ–£.
    """
    telegram_id = message.from_user.id
    user_profile = await get_user_profile_by_telegram_id(telegram_id)
    if not user_profile:
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ!\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "
            "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=cancel_keyboard(),
        )
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_gender)
    else:
        user_nutrition = await get_user_nutrition_by_telegram_id(telegram_id)
        profile_text = format_profile_text(user_profile, user_nutrition)
        await message.answer(
            profile_text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )
        await state.clear()


@router.callback_query(F.data == "close_profile")
async def process_close_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è.
    """
    await state.clear()
    await callback_query.message.delete()
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–µ."
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("edit_"))
async def process_edit_field(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å ...", –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω—ã–π State.
    """
    field_to_edit = callback_query.data.split("_", 1)[1]
    await state.update_data(field_to_edit=field_to_edit)
    await callback_query.message.delete()
    if field_to_edit == "gender":
        await callback_query.message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_gender)
    elif field_to_edit == "height":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—Å–º):", reply_markup=cancel_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_height)
    elif field_to_edit == "weight":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–∫–≥):", reply_markup=cancel_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_weight)
    elif field_to_edit == "target_weight":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ (–∫–≥):", reply_markup=cancel_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_target_weight)
    elif field_to_edit == "age":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=cancel_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_age)
    elif field_to_edit == "activity":
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_level_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_activity_level)
    elif field_to_edit == "goal":
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=goal_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_goal)
    else:
        await callback_query.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        await state.clear()

    await callback_query.answer()


@router.callback_query(
    F.data.startswith("gender_"), StateFilter(UserProfileStates.waiting_for_gender)
)
async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞.
    """
    gender_value = callback_query.data.split("_", 1)[1]
    try:
        gender = Gender(gender_value)
    except ValueError:
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback_query.answer()
        return

    user_profile = await get_user_profile_by_telegram_id(callback_query.from_user.id)
    if not user_profile:
        await state.update_data(gender=gender)
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
            reply_markup=cancel_keyboard(),
        )
        await state.set_state(UserProfileStates.waiting_for_height)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=callback_query.from_user.id,
            user_profile=user_profile,
            field_name="gender",
            new_value=gender,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await callback_query.message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )
    await callback_query.answer()


@router.message(StateFilter(UserProfileStates.waiting_for_gender))
async def process_gender_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª–∞.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard()
    )


@router.message(StateFilter(UserProfileStates.waiting_for_height))
async def process_height(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return

    try:
        height = int(message.text)
        if not 50 <= height <= 300:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—Å–º).", reply_markup=cancel_keyboard()
        )
        return

    user_profile = await get_user_profile_by_telegram_id(message.from_user.id)
    if not user_profile:
        await state.update_data(height=height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):", reply_markup=cancel_keyboard())
        await state.set_state(UserProfileStates.waiting_for_weight)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=message.from_user.id,
            user_profile=user_profile,
            field_name="height",
            new_value=height,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )


@router.message(StateFilter(UserProfileStates.waiting_for_weight))
async def process_weight(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return

    try:
        weight_str = message.text.replace(",", ".")
        weight = float(weight_str)

        if not 20.0 <= weight <= 500.0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–∫–≥).", reply_markup=cancel_keyboard()
        )
        return

    user_profile = await get_user_profile_by_telegram_id(message.from_user.id)
    if not user_profile:
        await state.update_data(weight=weight)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–∫–≥):", reply_markup=cancel_keyboard()
        )

        await create_weight_record_by_telegram_id(message.from_user.id, weight)

        await state.set_state(UserProfileStates.waiting_for_target_weight)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=message.from_user.id,
            user_profile=user_profile,
            field_name="weight",
            new_value=weight,
        )

        await create_weight_record_by_telegram_id(message.from_user.id, weight)

        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )


@router.message(StateFilter(UserProfileStates.waiting_for_target_weight))
async def process_target_weight(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return

    try:
        target_weight_str = message.text.replace(",", ".")
        target_weight = float(target_weight_str)

        if not 20.0 <= target_weight <= 500.0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ (–∫–≥).",
            reply_markup=cancel_keyboard(),
        )
        return

    user_profile = await get_user_profile_by_telegram_id(message.from_user.id)
    if not user_profile:
        await state.update_data(target_weight=target_weight)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=cancel_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_age)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=message.from_user.id,
            user_profile=user_profile,
            field_name="target_weight",
            new_value=target_weight,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )


@router.message(StateFilter(UserProfileStates.waiting_for_age))
async def process_age(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return

    try:
        age = int(message.text)
        if not 5 <= age <= 120:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–ª–µ—Ç).",
            reply_markup=cancel_keyboard(),
        )
        return

    user_profile = await get_user_profile_by_telegram_id(message.from_user.id)
    if not user_profile:
        await state.update_data(age=age)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_level_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_activity_level)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=message.from_user.id,
            user_profile=user_profile,
            field_name="age",
            new_value=age,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )


@router.callback_query(
    F.data.startswith("activity_"),
    StateFilter(UserProfileStates.waiting_for_activity_level),
)
async def process_activity_level(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    activity_key = callback_query.data.split("_", 1)[1]
    try:
        activity_level = ActivityLevel(activity_key)
    except ValueError:
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await callback_query.answer()
        return

    user_profile = await get_user_profile_by_telegram_id(callback_query.from_user.id)
    if not user_profile:
        await state.update_data(activity_level=activity_level)
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=goal_keyboard()
        )
        await state.set_state(UserProfileStates.waiting_for_goal)
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=callback_query.from_user.id,
            user_profile=user_profile,
            field_name="activity_level",
            new_value=activity_level,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await callback_query.message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )
    await callback_query.answer()


@router.message(StateFilter(UserProfileStates.waiting_for_activity_level))
async def process_activity_level_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_level_keyboard()
    )


@router.callback_query(
    F.data.startswith("goal_"), StateFilter(UserProfileStates.waiting_for_goal)
)
async def process_goal(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏.
    """
    goal_key = callback_query.data.split("_", 1)[1]
    try:
        goal = Goal(goal_key)
    except ValueError:
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏.")
        await callback_query.answer()
        return

    await state.update_data(goal=goal)
    user_data = await state.get_data()
    user_profile = await get_user_profile_by_telegram_id(callback_query.from_user.id)
    if not user_profile:
        daily_calories, proteins, fats, carbs = calculate_nutrition(
            gender=user_data["gender"],
            weight=user_data["weight"],
            height=user_data["height"],
            age=user_data["age"],
            activity_level=user_data["activity_level"],
            goal=user_data["goal"],
        )
        profile_data = {
            "gender": user_data["gender"],
            "height": user_data["height"],
            "weight": user_data["weight"],
            "target_weight": user_data["target_weight"],
            "age": user_data["age"],
            "activity_level": user_data["activity_level"],
            "goal": user_data["goal"],
        }
        nutrition_data = {
            "daily_calories": daily_calories,
            "proteins": proteins,
            "fats": fats,
            "carbohydrates": carbs,
        }

        try:
            await create_or_update_profile_and_nutrition_by_telegram_id(
                callback_query.from_user.id, profile_data, nutrition_data
            )
        except Exception as e:
            await callback_query.message.answer(
                str(e), reply_markup=types.ReplyKeyboardRemove()
            )
            await state.clear()
            await callback_query.answer()
            return

        await state.clear()
        new_profile = await get_user_profile_by_telegram_id(callback_query.from_user.id)
        new_nutrition = await get_user_nutrition_by_telegram_id(
            callback_query.from_user.id
        )
        text = format_profile_text(new_profile, new_nutrition)
        await callback_query.message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )
    else:
        updated_profile, updated_nutrition = await apply_profile_update(
            user_id=callback_query.from_user.id,
            user_profile=user_profile,
            field_name="goal",
            new_value=goal,
        )
        await state.clear()
        text = format_profile_text(updated_profile, updated_nutrition)
        await callback_query.message.answer(
            text,
            reply_markup=get_profile_edit_keyboard(),
            parse_mode="HTML",
        )

    await callback_query.answer()


@router.message(StateFilter(UserProfileStates.waiting_for_goal))
async def process_goal_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏.
    """
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()
        )
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=goal_keyboard())
