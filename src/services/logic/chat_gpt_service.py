import traceback
import re
from typing import List, Optional
import httpx

from src.settings import settings


async def call_gpt_api(
    url: str, headers: dict, data: dict, client: httpx.AsyncClient
) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        response = await client.post(url, headers=headers, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            if "choices" in result and len(result["choices"]) > 0:
                return result["choices"][0]["message"]["content"].strip()
            else:
                return f"–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å—Ç–∞—Ç—É—Å: {response.status_code}: {response.text}"
        else:
            return "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é."
    except Exception as e:
        traceback.print_exc()
        return "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é."


async def call_whisper_api(
    url: str, headers: dict, data: dict, files: dict, client: httpx.AsyncClient
) -> str:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ OpenAI Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑
    –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
    """
    try:
        response = await client.post(
            url, headers=headers, data=data, files=files, timeout=60
        )
        if response.status_code == 200:
            result = response.json()
            return result.get("text", "")
        else:
            print(
                f"–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å—Ç–∞—Ç—É—Å: {response.status_code}: {response.text}"
            )
            return ""
    except Exception as e:
        traceback.print_exc()
        return ""


async def convert_speech_to_text(file_path: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ OpenAI Whisper.
    """
    api_key = settings.gpt_token.get_secret_value()
    url = "https://api.openai.com/v1/audio/transcriptions"
    headers = {
        "Authorization": f"Bearer {api_key}",
    }
    data = {"model": "whisper-1", "language": "ru"}

    try:
        with open(file_path, "rb") as f:
            files = {"file": ("audio.ogg", f, "audio/ogg")}

            if not settings.proxy_list:
                async with settings.create_async_client_with_proxy() as client:
                    transcript = await call_whisper_api(
                        url, headers, data, files, client
                    )
                return transcript

            for _ in range(len(settings.proxy_list)):
                async with settings.create_async_client_with_proxy() as client:
                    transcript = await call_whisper_api(
                        url, headers, data, files, client
                    )
                    if transcript:
                        return transcript

    except Exception as e:
        print(f"Error in convert_speech_to_text: {e}")
        traceback.print_exc()

    return ""


async def ai_report(
    user_profile,
    user_nutrition,
    food_logs: List,
    report_type: str,
) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º.
    """
    if not food_logs:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    if report_type == "quality-report":
        prompt_header = """
            –¢—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∏—Ç–∞–Ω–∏—è", –∞ –∏–º–µ–Ω–Ω–æ:
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—É—é –º–Ω–æ–π –µ–¥—É, —á—Ç–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω, —á—Ç–æ —É–±—Ä–∞—Ç—å.
            –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ë–ñ–£, –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—É—é –º–Ω–æ–π –µ–¥—É.
        """
    elif report_type == "nutrition-report":
        prompt_header = """
            –¢—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å "–ê–Ω–∞–ª–∏–∑ –ö–ë–ñ–£", –∞ –∏–º–µ–Ω–Ω–æ:
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ö–ë–ñ–£, –Ω–µ –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ —Å–∞–º—É –µ–¥—É.
            –û–ø–∏—à–∏, –∫–∞–∫–∏—Ö –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω,
            —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ –≤ –Ω–æ—Ä–º–µ.
            –ù–µ –Ω—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –ö–ë–ñ–£ –≤—Å–µ—Ö –º–æ–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏, —á—Ç–æ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –¥–∞–ª–µ–µ.
            –≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏, –∞ –Ω–µ —Ç–æ —á—Ç–æ —è —Å—ä–µ–ª –∑–∞ —Å—É—Ç–∫–∏.
            –ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ —Ç–æ–º, –∫–∞–∫–∏—Ö –º–∞–∫—Ä–æ–Ω—É—Ç–∏—Ä–µ–Ω—Ç–æ–≤ —è –ø–æ—Ç—Ä–µ–±–ª—è—é —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∞ –∫–∞–∫–∏—Ö
            —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ.
        """
    else:
        prompt_header = "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –º–æ–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏."

    profile_str = (
        f"–†–æ—Å—Ç: {user_profile.height}, "
        f"–í–µ—Å: {user_profile.weight}, "
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_profile.age}, "
        f"–¶–µ–ª—å: {user_profile.goal}"
    )

    nurtirtion_str = (
        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_nutrition.calories}, "
        f"–ù–æ—Ä–º–∞ –±–µ–ª–∫–æ–≤: {user_nutrition.proteins}, "
        f"–ù–æ—Ä–º–∞ –∂–∏—Ä–æ–≤: {user_nutrition.fats}, "
        f"–ù–æ—Ä–º–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤: {user_nutrition.carbohydrates}"
    )

    logs_description = []
    for idx, log in enumerate(food_logs, start=1):
        logs_description.append(
            f"{idx}) {log.food_name}, –ö–∞–ª–æ—Ä–∏–∏: {log.calories}, "
            f"–ë–µ–ª–∫–∏: {log.proteins}, –ñ–∏—Ä—ã: {log.fats}, –£–≥–ª–µ–≤–æ–¥—ã: {log.carbohydrates}"
        )
    logs_str = "\n".join(logs_description)
    prompt = f"""
        {prompt_header}
        –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ç–∫–æ —Ç–æ, —á—Ç–æ —è —Å–∫–∞–∑–∞–ª –≤ –ø—Ä–µ–¥—ã–¥—É—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
        –í–æ—Ç –º–æ–∏ –¥–∞–Ω–Ω—ã–µ:{profile_str}
        –í–æ—Ç –º–æ—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:{nurtirtion_str}
        –í–æ—Ç –º–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(food_logs)} –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:
        {logs_str}\n\n
        –¢–µ–±–µ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –µ–º–∫–∏–π –æ—Ç–≤–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –±–µ–∑ –ø—Ä–∏–≤–µ—Å—Ç—Å—Ç–≤–∏–π.
        –ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –∏ –∫ —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª –∫–ª–∏–µ–Ω—Ç c —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        –ù–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª, –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —Å–≤–æ—é –∑–∞–¥–∞—á—É.
    """
    print(prompt)

    api_key = settings.gpt_token.get_secret_value()
    url = "https://api.openai.com/v1/chat/completions"
    messages = [
        {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é."},
        {"role": "user", "content": prompt.strip()},
    ]
    data = {
        "model": "chatgpt-4o-latest",
        "messages": messages,
        "max_tokens": 800,
        "temperature": 0.5,
        "n": 1,
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}",
    }

    async with settings.create_async_client_with_proxy() as client:
        response_text = await call_gpt_api(url, headers, data, client)

    return response_text


async def retrieve_nutrition_data(
    product_name: str, image_base64: Optional[str] = None
) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.
    """

    api_key = settings.gpt_token.get_secret_value()
    url = "https://api.openai.com/v1/chat/completions"

    if image_base64:
        product_name = "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"

    prompt = f"""
        –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥, –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—â–∏.
        –°–≤–æ—é –µ–¥—É –æ–Ω –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–∞–∫ ‚Äî {product_name}. –û–ø–∏—à–∏ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        - –ï–¥–∞: —Ç–æ, —á—Ç–æ –æ–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–ª–∏, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç–æ—á–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –≥—Ä–∞–º–º–æ–≤–∫–∏, —Ç–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ)
        - –ö–∞–ª–æ—Ä–∏–∏: <—á–∏—Å–ª–æ> –∫–∫–∞–ª
        - –ë–µ–ª–∫–∏: <—á–∏—Å–ª–æ> –≥., –ñ–∏—Ä—ã: <—á–∏—Å–ª–æ> –≥., –£–≥–ª–µ–≤–æ–¥—ã: <—á–∏—Å–ª–æ> –≥.
        - –ö–ª–µ—Ç—á–∞—Ç–∫–∞: <—á–∏—Å–ª–æ> –≥.
        –ù–µ –ø–∏—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ –∫–∞–ª–æ—Ä–∏—è—Ö, –±–µ–ª–∫–∞—Ö, –∂–∏—Ä–∞—Ö, —É–≥–ª–µ–≤–æ–¥–∞—Ö –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–µ, –µ—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è ‚Äî –ø–∏—à–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω—É –∏–∑ —Ç–∞–∫–∏—Ö —Å—Ç—Ä–æ–∫: "–†–µ–π—Ç–∏–Ω–≥: üî¥" –∏–ª–∏ "–†–µ–π—Ç–∏–Ω–≥: üü°" –∏–ª–∏ "–†–µ–π—Ç–∏–Ω–≥: üü¢", –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å –µ–¥—É –≤—Ä–µ–¥–Ω–æ–π, –æ–±—ã—á–Ω–æ–π –∏–ª–∏ –ø–æ–ª–µ–∑–Ω–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–¥—É, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ:
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∏—Å—Ö–æ–¥—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–µ–µ."
    """

    if image_base64:
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é."},
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –∑–∞ –µ–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ –∏ –ø–æ—Å—á–∏—Ç–∞–π –ö–ë–ñ–£.",
                    },
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"},
                    },
                ],
            },
            {"role": "user", "content": prompt.strip()},
        ]
    else:
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é."},
            {"role": "user", "content": prompt.strip()},
        ]
    data = {
        "model": "chatgpt-4o-latest",
        "messages": messages,
        "max_tokens": 150,
        "temperature": 0.5,
        "n": 1,
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}",
    }

    if not settings.proxy_list:
        async with settings.create_async_client_with_proxy() as client:
            return await call_gpt_api(url, headers, data, client)
    else:
        for _ in range(len(settings.proxy_list)):
            async with settings.create_async_client_with_proxy() as client:
                answer = await call_gpt_api(url, headers, data, client)
                if not answer.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                    return answer
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∏—Å—Ö–æ–¥—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."


async def extract_nutrition_details(response_text: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–µ –∏ –µ–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö.
    """
    try:
        food_match = re.search(r"–ï–¥–∞:\s*(.*)", response_text)
        value_pattern = r"(\d+[.,]?\d*)"

        calories_match = re.search(
            rf"–ö–∞–ª–æ—Ä–∏–∏:\s*{value_pattern}(?:\s*[-‚Äì‚Äî]\s*\d+[.,]?\d*)?\s*–∫–∫–∞–ª",
            response_text,
        )
        proteins_match = re.search(
            rf"–ë–µ–ª–∫–∏:\s*{value_pattern}(?:\s*[-‚Äì‚Äî]\s*\d+[.,]?\d*)?\s*–≥",
            response_text,
        )
        fats_match = re.search(
            rf"–ñ–∏—Ä—ã:\s*{value_pattern}(?:\s*[-‚Äì‚Äî]\s*\d+[.,]?\d*)?\s*–≥",
            response_text,
        )
        carbohydrates_match = re.search(
            rf"–£–≥–ª–µ–≤–æ–¥—ã:\s*{value_pattern}(?:\s*[-‚Äì‚Äî]\s*\d+[.,]?\d*)?\s*–≥",
            response_text,
        )
        fiber_match = re.search(
            rf"–ö–ª–µ—Ç—á–∞—Ç–∫–∞:\s*{value_pattern}(?:\s*[-‚Äì‚Äî]\s*\d+[.,]?\d*)?\s*–≥",
            response_text,
        )
        rating_match = re.search(r"–†–µ–π—Ç–∏–Ω–≥:\s*([üî¥üü°üü¢])", response_text)

        if not all(
            [
                food_match,
                calories_match,
                proteins_match,
                fats_match,
                carbohydrates_match,
                fiber_match,
                rating_match,
            ]
        ):
            return (
                None,
                f"{response_text}",
            )

        def parse_value(value_str: str) -> float:
            return float(value_str.replace(",", "."))

        nutrition_info = {
            "food": food_match.group(1).strip(),
            "calories": parse_value(calories_match.group(1)),
            "proteins": parse_value(proteins_match.group(1)),
            "fats": parse_value(fats_match.group(1)),
            "carbohydrates": parse_value(carbohydrates_match.group(1)),
            "fiber": parse_value(fiber_match.group(1)),
            "rating": rating_match.group(1).strip(),
        }

        if nutrition_info["rating"] not in ["üî¥", "üü°", "üü¢"]:
            return (
                None,
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {nutrition_info['rating']}",
            )

        return nutrition_info, None

    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
